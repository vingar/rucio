version: "2"

services:
  rucio:
    build: .
    ports:
      - "443:443"
    links:
      - postgres:postgres
      - activemq:activemq
    depends_on:
      - "postgres"
      - "activemq"
    command: ["httpd", "-D", "FOREGROUND"]
    volumes:
      - ../../../etc/docker/standalone/rucio:/opt/rucio # should contain rucio.cfg
      - ../../../etc/docker/standalone/grid-security:/etc/grid-security  # should contain the server host certificate and key ( hostcert.pem and hostkey.pem)
  postgres:
    image: postgres:10.3
    environment:
      - POSTGRES_PASSWORD=secret
  activemq:
    image: webcenter/activemq:latest
    ports:
      - 8161:8161
      - 61616:61616
      - 61613:61613
    environment:
      - ACTIVEMQ_NAME=amq
      - ACTIVEMQ_REMOVE_DEFAULT_ACCOUNT='True'
      - ACTIVEMQ_ADMIN_LOGIN=admin
      - ACTIVEMQ_ADMIN_PASSWORD=admin

  # FTS: http://fts3-docs.web.cern.ch/fts3-docs/docs/install/docker_containers.html
  fts3:
    image: gitlab-registry.cern.ch/fts/fts3:latest
    links:
      - mysql:mysql
    volumes:
      - ../../../etc/docker/standalone/fts3:/etc/fts3  # should contain the fts3config and fts-msg-monitoring.conf
                                                       # please refer to the FTS3 Setup guide for details on how to configure them
      - ../../../etc/docker/standalone/grid-security:/etc/grid-security  # should contain the CA certificates and VOMS lcs files.
                                                       # Please refer to the Quick Setup guide for details
  fts-rest:
    image: gitlab-registry.cern.ch/fts/fts-rest:latest
    ports:
      - "8446:8446"
    links:
      - mysql:mysql
    volumes:
      - ../../../etc/docker/standalone/fts3:/etc/fts3  # should contain the fts3config and fts3rest.ini
                                                       # please refer to the REST Setup guide for details on how to configure them
      - ../../../etc/docker/standalone/grid-security:/etc/grid-security  # should contain the server host certificate and key ( hostcert.pem and hostkey.pem)
                                                       # together with CA certificates and VOMS lcs files.
                                                       # Please refer to the Quick Setup guide for details
  fts-monitoring:
    image: gitlab-registry.cern.ch/fts/fts-monitoring:latest
    ports:
      - "8449:8449"
    links:
      - mysql:mysql
    volumes:
      - ../../../etc/docker/standalone/fts3:/etc/fts3  # should contain the fts3config file
                                                       # please refer to the FTS3 Setup guide for details on how to configure it
      - ../../../etc/docker/standalone/grid-security:/etc/grid-security  # should contain the server host certificate and key ( hostcert.pem and hostkey.pem)
                                                       #together with CA certificates.
                                                       # Please refer to the Quick Setup guide for details
  mysql:
    image: mysql/mysql-server:5.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD=True
      - MYSQL_DATABASE=fts
      - MYSQL_USER=fts
      - MYSQL_PASSWORD=fts
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
#    container_name: elasticsearch
#    environment:
#      - cluster.name=docker-cluster
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - ELASTIC_PASSWORD=MagicWord
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
##    volumes:
##      - esdata1:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
##    networks:
##      - esnet
#  grafana:
#    image: grafana/grafana
#    ports:
#      - "3000:3000"
#    links:
#      - elasticsearch:elasticsearch
#    environment:
#      - GF_SERVER_ROOT_URL=http://localhost
#      - GF_SECURITY_ADMIN_PASSWORD=secret
#  logstash:
#    image: docker.elastic.co/logstash/logstash:6.2.4
#    links:
#      - activemq:activemq
#      - elasticsearch:elasticsearch
#    environment:
#      - CONFIG: 'input { stomp { host => "activemq" destination => "TestQueue"} } output { elasticsearch { host => “elasticsearch”}}'
