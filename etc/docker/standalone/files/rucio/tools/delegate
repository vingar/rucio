#!/usr/bin/env python
'''
    Script to delegate proxy to FTS
'''

import argparse
import os
import requests
import six
import sys
import time

from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from datetime import datetime, timedelta
from requests.packages.urllib3 import disable_warnings

disable_warnings()


def get_parser():
    '''
    Get parser
    '''
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=True)

    oparser.add_argument(
        '--url', dest="url", help="The service url.",
        default='https://localhost:8446')
    oparser.add_argument(
        '--proxy', dest='proxy',
        default='/tmp/x509up_u' + str(os.getuid()),
        help='Client X509 proxy file.')
    oparser.add_argument(
        '--ca-certificate', dest='ca_certificate',
        default=None,
        help='CA certificate to verify peer against (SSL).')
    oparser.add_argument(
        '--lifetime', dest='lifetime', action='store',
        default=24, help='Lifetime of the delegation')
    return oparser


if __name__ == '__main__':

    oparser = get_parser()
    args = oparser.parse_args(sys.argv[1:])

    cert = args.proxy
    external_host = args.url
    lifetime = args.lifetime

    with open(cert, 'rb') as f:
        proxy_pem = f.read()

    result = requests.get(
        "%s/whoami" % external_host,
        verify=False,
        cert=cert,
        headers={'Content-Type': 'application/json'}
        ).json()

    delegation_id = result['delegation_id']

    x509_request = requests.get(
        '%s/delegation/%s/request' % (external_host, delegation_id),
        verify=False, cert=cert
        ).text

    # sign the request
    now = datetime.utcnow()

    csr = x509.load_pem_x509_csr(str(x509_request), default_backend())
    proxy = x509.load_pem_x509_certificate(proxy_pem, default_backend())

    key = serialization.load_pem_private_key(proxy_pem, password=None, backend=default_backend())
    key_id = x509.SubjectKeyIdentifier.from_public_key(key.public_key())
    subject_attributes = list(proxy.subject)
    subject_attributes.append(
        x509.NameAttribute(x509.oid.NameOID.COMMON_NAME, six.u(str(int(time.time())))))

    new_cert = x509.CertificateBuilder() \
        .issuer_name(proxy.subject) \
        .not_valid_before(now) \
        .not_valid_after(now + timedelta(hours=lifetime)) \
        .serial_number(proxy.serial_number) \
        .public_key(csr.public_key()) \
        .subject_name(x509.Name(subject_attributes)) \
        .add_extension(x509.BasicConstraints(ca=False, path_length=None),
                   critical=True) \
    .add_extension(x509.KeyUsage(digital_signature=True,
                                 content_commitment=False,
                                 key_encipherment=False,
                                 data_encipherment=False,
                                 key_agreement=True,
                                 key_cert_sign=False,
                                 crl_sign=False,
                                 encipher_only=False,
                                 decipher_only=False),
                   critical=True) \
    .add_extension(x509.AuthorityKeyIdentifier(
                    key_identifier=key_id.digest,
                    authority_cert_issuer=[x509.DirectoryName(proxy.issuer)],
                    authority_cert_serial_number=proxy.serial_number
                    ),
                   critical=False) \
    .add_extension(x509.extensions.UnrecognizedExtension(
        x509.ObjectIdentifier("1.3.6.1.5.5.7.1.14"),
        b"0\x0c0\n\x06\x08+\x06\x01\x05\x05\x07\x15\x01"),
    critical=True) \
    .sign(private_key=key,
          algorithm=proxy.signature_hash_algorithm,
          backend=default_backend())

    data = new_cert.public_bytes(serialization.Encoding.PEM) + proxy_pem

    result = requests.put(
        '%s/delegation/%s/credential' % (external_host, delegation_id),
        verify=False,
        cert=cert,
        data=data
        ).text

    result = requests.get(
        '%s/delegation/%s' % (external_host, delegation_id),
        verify=False,
        cert=cert
        ).json()
    print result['termination_time']

    sys.exit(0)

